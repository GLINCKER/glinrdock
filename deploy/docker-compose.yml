services:
  controller:
    image: ghcr.io/glincker/glinrdock:${TAG:-latest}
    container_name: glinrdock_controller
    restart: unless-stopped
    
    # Security hardening
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65532:65532"  # nonroot user from distroless
    
    # Network configuration
    ports:
      - "${GLINRDOCK_HTTP_PORT:-8080}:8080"
    
    # Environment configuration
    environment:
      GLINRDOCK_HTTP_ADDR: ":8080"
      GLINRDOCK_DATA_DIR: "/data"
      GLINRDOCK_LOG_LEVEL: "${GLINRDOCK_LOG_LEVEL:-info}"
      GLINRDOCK_LOG_FORMAT: "${GLINRDOCK_LOG_FORMAT:-json}"
      ADMIN_TOKEN: "${ADMIN_TOKEN:-change-this-secure-token-now}"
    
    # Volume mounts
    volumes:
      # Persistent data storage
      - glinrdock_data:/data
      
      # Docker socket for container management
      - /var/run/docker.sock:/var/run/docker.sock
      
      # Optional configuration mount
      - "${GLINRDOCK_CONFIG_DIR:-./config}:/config:ro"
      
      # Temporary filesystem for runtime files
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          mode: 1777
    
    # Health check
    healthcheck:
      test: ["/usr/local/bin/glinrdockd", "healthcheck", "--endpoint", "http://localhost:8080/v1/health"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"
    
    # Labels for service discovery
    labels:
      - "com.glinr.service=glinrdock"
      - "com.glinr.component=controller"
      - "com.glinr.version=${TAG:-latest}"
    
    networks:
      - glinrdock

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: glinrdock-nginx
    restart: unless-stopped
    profiles:
      - nginx
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - glinrdock
    networks:
      - glinrdock

  # Optional: Caddy reverse proxy with automatic HTTPS
  caddy:
    image: caddy:2.8-alpine
    container_name: glinrdock_proxy
    restart: unless-stopped
    profiles:
      - proxy
    
    # Security hardening
    read_only: true
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "caddy:caddy"
    
    ports:
      - "${GLINRDOCK_HTTPS_PORT:-8443}:8443"
    
    volumes:
      - "${GLINRDOCK_CADDY_CONFIG:-./deploy/caddy/Caddyfile}:/etc/caddy/Caddyfile:ro"
      - caddy_data:/data
      - caddy_config:/config
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 50M
    
    environment:
      GLINRDOCK_UPSTREAM: "controller:8080"
      DOMAIN: "${DOMAIN:-localhost}"
      EMAIL: "${EMAIL:-admin@localhost}"
    
    depends_on:
      - controller
    networks:
      - glinrdock

  # Optional: Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: glinrdock-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
      - production
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - glinrdock

  # Optional: Grafana dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: glinrdock-grafana
    restart: unless-stopped
    profiles:
      - monitoring
      - production
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - glinrdock

volumes:
  # GlinrDock volumes
  glinrdock_data:
    driver: local
  glinrdock_logs:
    driver: local
  
  # Reverse proxy volumes
  nginx_logs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  glinrdock:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Configuration examples:
# 1. Basic deployment:
#    docker compose up -d
#
# 2. With reverse proxy:
#    docker compose --profile proxy up -d
#
# 3. With monitoring:
#    docker compose --profile monitoring up -d
#
# 4. Full stack:
#    docker compose --profile proxy --profile monitoring up -d
#
# Environment variables:
# - TAG: Image tag (default: latest)
# - GLINRDOCK_HTTP_PORT: HTTP port (default: 8080)  
# - GLINRDOCK_HTTPS_PORT: HTTPS port (default: 8443)
# - GLINRDOCK_LOG_LEVEL: Log level (default: info)
# - GLINRDOCK_LOG_FORMAT: Log format (default: json)
# - GLINRDOCK_CONFIG_DIR: Config directory (default: ./config)
# - ADMIN_TOKEN: Admin authentication token (REQUIRED)
# - DOMAIN: Domain for TLS certificates (default: localhost)
# - EMAIL: Email for Let's Encrypt (default: admin@localhost)
# - GRAFANA_PASSWORD: Grafana admin password (default: admin)
#
# Example .env file:
# TAG=v1.0.0
# ADMIN_TOKEN=your-super-secure-admin-token-change-this
# GLINRDOCK_HTTP_PORT=8080
# GLINRDOCK_LOG_LEVEL=info
# DOMAIN=glinrdock.yourdomain.com
# EMAIL=admin@yourdomain.com
# GRAFANA_PASSWORD=secure-grafana-password